# Bella Wrapper Script
param(
    [Parameter(Mandatory=$true)]
    [string]$configFile
)

# Function to update the Azure LLM config with user input
function Update-AzureLLMConfig {
    param (
        [string]$purpose,
        [string]$filename,
        [string]$folderPath
    )
    
    # Read the current Azure LLM config using absolute path
    $llmConfigPath = Join-Path $PSScriptRoot "azure_llm_config.json"
    if (-not (Test-Path $llmConfigPath)) {
        throw "Azure LLM config file not found at: $llmConfigPath"
    }
    $llmConfig = Get-Content -Path $llmConfigPath | ConvertFrom-Json
    
    # Update the Write_File template with user input
    $llmConfig.Azure_LLM.promptTemplate.Write_File.purpose = $purpose
    $llmConfig.Azure_LLM.promptTemplate.Write_File.filename = $filename
    
    # Create the user message by replacing placeholders in the template
    $template = $llmConfig.Azure_LLM.promptTemplate.Write_File.template
    $userMessage = $template.Replace("{purpose}", $purpose).Replace("{filename}", $filename)
    $llmConfig.Azure_LLM.userMessage = $userMessage
    
    # Update the output file with absolute path
    $llmConfig.Azure_LLM.outputFile = Join-Path $PSScriptRoot "response.json"
    
    # Save the updated config
    $llmConfig | ConvertTo-Json -Depth 10 | Set-Content -Path $llmConfigPath
}

# Function to update the Write File config with user input
function Update-WriteFileConfig {
    param (
        [string]$filename,
        [string]$folderPath,
        [string]$content
    )
    
    # Read the current Write File config using absolute path
    $writeConfigPath = Join-Path $PSScriptRoot "write_file_config.json"
    if (-not (Test-Path $writeConfigPath)) {
        throw "Write File config not found at: $writeConfigPath"
    }
    $writeConfig = Get-Content -Path $writeConfigPath | ConvertFrom-Json
    
    # Update the file path with the full path
    $fullPath = Join-Path $folderPath $filename
    $writeConfig.Write_File.filePath = $fullPath
    $writeConfig.Write_File.content = $content
    
    # Save the updated config
    $writeConfig | ConvertTo-Json -Depth 10 | Set-Content -Path $writeConfigPath
}

# Main script
try {
    # Read the user input config
    if (-not (Test-Path $configFile)) {
        throw "User config file not found at: $configFile"
    }
    $userConfig = Get-Content -Path $configFile | ConvertFrom-Json
    
    # Get the folder path from the config file path
    $folderPath = Split-Path -Parent $configFile
    
    # Create the output directory if it doesn't exist
    if (-not (Test-Path $folderPath)) {
        New-Item -ItemType Directory -Path $folderPath -Force | Out-Null
    }
    
    # Update the Azure LLM config with user input
    Update-AzureLLMConfig -purpose $userConfig.codePurpose -filename $userConfig.fileName -folderPath $folderPath
    
    # Update the Write File config with the filename and initial content
    Update-WriteFileConfig -filename $userConfig.fileName -folderPath $folderPath -content "// Content will be generated by Azure LLM"
    
    # Call the Azure LLM to generate the code
    Write-Host "Calling Azure LLM to generate code..."
    $bellaScripterPath = Join-Path $PSScriptRoot "BellaScripter.ps1"
    if (-not (Test-Path $bellaScripterPath)) {
        throw "BellaScripter.ps1 not found at: $bellaScripterPath"
    }
    & $bellaScripterPath -toolName AzureLLM -executor $userConfig.executor
    
    # Parse the response
    $responsePath = Join-Path $PSScriptRoot "response.json"
    if (-not (Test-Path $responsePath)) {
        throw "Response file not found at: $responsePath"
    }
    $response = Get-Content -Path $responsePath | ConvertFrom-Json
    
    # If the response contains a Write_File operation, execute it
    if ($response.Write_File) {
        # Update the Write File config with the generated content
        Update-WriteFileConfig -filename $userConfig.fileName -folderPath $folderPath -content $response.Write_File.content
        
        Write-Host "Writing file with generated content..."
        & $bellaScripterPath -toolName Write -executor $userConfig.executor
    }
    else {
        Write-Host "No Write_File operation found in the response."
    }
    
    Write-Host "Process completed successfully!"
}
catch {
    Write-Error "An error occurred: $_"
} 